# -*- coding:utf-8-*-
"""
    project: network models
    author: cherish_zhang(2015.5/21)
    method: preferential attachment model
            (higher degree nodes get more attention from newly added nodes)
            ps: the degree for directed graph is out + in
"""
#import numpy as np
import random
#import csv


def add_to_dict(dict, key, value):
    if key not in dict:
        dict.setdefault(key, int(value))
    else:
        dict[key] += int(value)
#----------------------------------------------------------#


""" Load graph data from a file stored at specific path
    The file's format is follow:
        1,2\n
        1,4\n
        ......
    para:
        path: where the file is stored
    return: a graph represented by list

def load_graph_data(path):
    graph = []
    file = csv.reader(open(path))
    for line in file:
        graph.append([int(line[0]), int(line[1])])
    return graph
#------------------------------------------------------#
"""

""" Generate a random undirected graph
    para:
        m0: the number of nodes with degrees at least 1
    return: a scale-free network generated random
"""
def random_graph_gen(m0):
    graph = []
    node_degrees = {}
    while len(node_degrees) != m0:
        node_a = random.randint(1, m0)
        node_b = random.randint(1, m0)
        while [node_a, node_b] in graph or [node_b, node_a] in graph or node_a == node_b:
            node_b = random.randint(1, m0)
        graph.append([node_a, node_b])
        add_to_dict(node_degrees, node_a, 1)
        add_to_dict(node_degrees, node_b, 1)
    return graph
#----------------------------------------------------------#


""" preferential attachment model
    para:
        m0: the number of nodes in the initial graph
        expected_connections: the expected edges for new added nodes
        t: the number of new added nodes
    return: a scale-free network generated by PAM
"""
def preferential_attachment_gen(init_graph, expected_connections, t):
    #----Initial graph with m0 nodes with degrees at least 1----#
    if init_graph == []:
        print "error: the original graph is null!"

    node_degrees = {}
    for [node_a, node_b] in init_graph:
        add_to_dict(node_degrees, node_a, 1)
        add_to_dict(node_degrees, node_b, 1)
    if len(node_degrees) < expected_connections:
        print len(node_degrees)
        expected_connections = len(node_degrees)
       #print "error: the expected connections for a new added node is too large!"  
    node_num = len(node_degrees)
   
    #-----------------------------------------------------------#
    #----the first ingredient:the growth element----#
    for i in xrange(1, t+1):
        node_vi = node_num + 1 #---add a new node vi---#
        degree_of_vi = 0
        #---the second ingredient:the preferential attachment element---#
        while degree_of_vi != expected_connections:
            list = []
            for j in xrange(1, node_num+1):
                if j in node_degrees:
                    for counts in xrange(0, node_degrees[j]):
                        list.append(j)
            #---connect vi to a random node vj with probability---#
            node_vj = random.choice(list)
            while [node_vi, node_vj] in init_graph:
               node_vj = random.choice(list)
            init_graph.append([node_vi, node_vj])
            degree_of_vi += 1
        node_num += 1
        add_to_dict(node_degrees, node_vi, degree_of_vi)
    return init_graph
#-------------------------------------------------------------------#


if __name__ == '__main__':
    #graph = load_graph_data('graph1.txt')
    graph = random_graph_gen(10)
    print graph
    graph = preferential_attachment_gen(graph, 3, 1)
    print "final graph:\n", graph
